package as.pw.candee.module.exploit;
import as.pw.candee.module.Module;
import as.pw.candee.setting.Setting;
import as.pw.candee.utils.BlockUtil;
import as.pw.candee.utils.InventoryUtil;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
public class Burrow
        extends Module {
        private final Setting<Float> offset;
        private final Setting<Boolean> sneak;
        private final Setting<Boolean> echest;
        private final Setting<Boolean> sushiBypass;
        private BlockPos originalPos;
        private int oldSlot;
        public Burrow() {
                super("Burrow", Categories.EXPLOIT, false, false);
                this.offset = register(new Setting("Offset", 7.0F, 30.0F, -20.0F));
                this.sneak = register(new Setting("Sneak", Boolean.FALSE));
                this.echest = register(new Setting("EChest", Boolean.FALSE));
                this.sushiBypass = register(new Setting("Bypass", Boolean.FALSE));
                this.oldSlot = -1;
        }
        public void onEnable() {
                super.onEnable();
                this.originalPos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ);
                if (mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) || intersectsWithEntity(this.originalPos)) {
                        toggle();
                        return;
                }
                this.oldSlot = mc.player.inventory.currentItem;
        }
        public void onTick() {
                if ((InventoryUtil.findHotbarBlock(Blocks.OBSIDIAN) == -1 && !this.echest.getValue()) || (InventoryUtil.findHotbarBlock(Blocks.ENDER_CHEST) == -1 && this.echest.getValue())) {
                        sendMessage("Can't find material in hotbar!");
                        toggle();
                        return;
                }
                switchToSlot(InventoryUtil.findHotbarBlock(this.echest.getValue() ? Blocks.ENDER_CHEST : Blocks.OBSIDIAN));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.41999998688698D, mc.player.posZ, true));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.7531999805211997D, mc.player.posZ, true));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.00133597911214D, mc.player.posZ, true));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.16610926093821D, mc.player.posZ, true));
                boolean sneaking = mc.player.isSneaking();
                if (this.sneak.getValue() && sneaking) {
                        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING));
                }
                BlockUtil.placeBlock(this.originalPos, EnumHand.MAIN_HAND, false, true, sneaking);
                if (this.sushiBypass.getValue()) {
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1.11D, mc.player.posZ, false));
                }
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + this.offset.getValue(), mc.player.posZ, false));
                switchToSlot(this.oldSlot);
                if (this.sneak.getValue() && sneaking) {
                        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                }
                toggle();
        }
        private boolean intersectsWithEntity(BlockPos pos) {
                for (Entity entity : mc.world.loadedEntityList) {
                        if (entity.equals(mc.player)) {
                                continue;
                        }
                        if (entity instanceof net.minecraft.entity.item.EntityItem) {
                                continue;
                        }
                        if ((new AxisAlignedBB(pos)).intersects(entity.getEntityBoundingBox())) {
                                return true;
                        }
                }
                return false;
        }
        public static void switchToSlot(int slot) {
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.inventory.currentItem = slot;
                mc.playerController.updateController();
        }
}